import type { Arbitrary } from '../../arbitrary/arbitrary/index.js'
import { interleave } from '../../arbitrary/arbitrary/index.js'
import type { ArbitraryContext } from '../../arbitrary/context/index.js'
import type { Dependent } from '../../arbitrary/dependent/index.js'
import { dependentArbitrary } from '../../arbitrary/dependent/index.js'

/**
 * It takes an arbitrary number of arbitraries and returns a new arbitrary that generates tuples of the
 * values generated by the input arbitraries.
 *
 * ### Example
 * ```ts
 * random(tuple(integer(), integer()))
 * // => [921604357, 511147728]
 *
 * random(tuple(integer(), integer()))
 * // => [922310816, 522685001]
 * ```
 *
 * @param xs - The array of arbitraries to interleave.
 * @returns A dependent arbitrary that is a tuple of the values of the arbitraries passed in.
 *
 * @group Arbitrary
 */
export function tuple<T extends Arbitrary<unknown>[]>(
    ...xs: [...T]
): Dependent<{ [K in keyof T]: T[K] extends { value(context: ArbitraryContext): { value: infer Value } } ? Value : never }> {
    return dependentArbitrary((context) => interleave(...xs.map((x) => x.value(context)))) as Dependent<{
        [K in keyof T]: T[K] extends { value(context: ArbitraryContext): { value: infer Value } } ? Value : never
    }>
}
